/* =========================================================
 * ====                   WARNING                        ===
 * =========================================================
 * The code in this tab has been generated from the GUI form
 * designer and care should be taken when editing this file.
 * Only add/edit code inside the event handlers i.e. only
 * use lines between the matching comment tags. e.g.
 
 void myBtnEvents(GButton button) { //_CODE_:button1:12356:
 // It is safe to enter your event code here
 } //_CODE_:button1:12356:
 
 * Do not rename this tab!
 * =========================================================
 */

synchronized public void win_draw1(PApplet appc, GWinData data) { //_CODE_:window1:353653:
  appc.background(230);
} //_CODE_:window1:353653:

public void button1_click1(GButton source, GEvent event) { //_CODE_:button1:920303:
  println("Saving...");
  ArrayList<String> temp = new ArrayList<String>();

  // Save individual cell states
  for (int rows = 0; rows < maze.rows; rows++) {
    for (int cols = 0; cols < maze.cols; cols++) {
      temp.add(str(maze.grid[rows][cols].state));
    }
  }

  // Save the start position
  temp.add("start:" + maze.start.x + "," + maze.start.y);

  // Save the end position
  temp.add("end:" + maze.end.x + "," + maze.end.y);

  String[] mazeStates = new String[temp.size()];
  for (int n = 0; n < temp.size(); n++) {
    mazeStates[n] = temp.get(n);
  }

  saveStrings("maze.txt", mazeStates);
  println("Saved!");
} //_CODE_:button1:920303:

public void button2_click1(GButton source, GEvent event) { //_CODE_:button2:479475:
  println("Loading...");
  String[] mazeStates = loadStrings("maze.txt");

  int rows = maze.rows;
  int cols = maze.cols;

  // Initialize a 2D array for the incoming cell states
  int[][] grid = new int[rows][cols];

  int index = 0;
  for (int r = 0; r < rows; r++) {
    for (int c = 0; c < cols; c++) {
      grid[r][c] = int(mazeStates[index]);
      index++;
    }
  }

  // Set the saved start position
  String startLine = mazeStates[index++];
  String[] startCoords = startLine.split(":")[1].split(",");
  float startX = float(startCoords[0]);
  float startY = float(startCoords[1]);
  maze.start = new PVector(startX, startY);

  // Set the saved end position
  String endLine = mazeStates[index++];
  String[] endCoords = endLine.split(":")[1].split(",");
  float endX = float(endCoords[0]);
  float endY = float(endCoords[1]);
  maze.end = new PVector(endX, endY);

  // Assign the cell states to the maze
  for (int r = 0; r < rows; r ++) {
    for (int c = 0; c < cols; c ++) {
      PVector temp = new PVector(r, c);
      maze.grid[r][c] = new Cell (temp, grid[r][c]);
    }
  }
  println("Loaded!");
} //_CODE_:button2:479475:

public void button3_click1(GButton source, GEvent event) { //_CODE_:button3:567534:
  println("Solving...");
  solve = true;
} //_CODE_:button3:567534:

public void button4_click1(GButton source, GEvent event) { //_CODE_:button4:476340:
  maze.resetMaze();
  maze.initialize();
} //_CODE_:button4:476340:



// Create all the GUI controls.
// autogenerated do not edit
public void createGUI() {
  G4P.messagesEnabled(false);
  G4P.setGlobalColorScheme(GCScheme.BLUE_SCHEME);
  G4P.setMouseOverEnabled(false);
  surface.setTitle("Maze Solver");
  window1 = GWindow.getWindow(this, "Welcome Screen", 0, 0, 175, 250, JAVA2D);
  window1.noLoop();
  window1.setActionOnClose(G4P.EXIT_APP);
  window1.addDrawHandler(this, "win_draw1");
  label1 = new GLabel(window1, 10, 0, 150, 50);
  label1.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label1.setText("Welcome to the Maze Solver!");
  label1.setOpaque(true);
  button1 = new GButton(window1, 40, 150, 90, 30);
  button1.setText("Save to File");
  button1.addEventHandler(this, "button1_click1");
  button2 = new GButton(window1, 40, 110, 90, 30);
  button2.setText("Load from File");
  button2.addEventHandler(this, "button2_click1");
  button3 = new GButton(window1, 40, 190, 90, 30);
  button3.setText("Solve!");
  button3.addEventHandler(this, "button3_click1");
  button4 = new GButton(window1, 40, 70, 90, 30);
  button4.setText("Regenerate");
  button4.addEventHandler(this, "button4_click1");
  window1.loop();
}

// Variable declarations
// autogenerated do not edit
GWindow window1;
GLabel label1;
GButton button1;
GButton button2;
GButton button3;
GButton button4;
